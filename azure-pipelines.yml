trigger:
- main

variables:
- group: variablesEnv
- name: DEBUG
  value: 'True'

pool:
  vmImage: ubuntu-latest

steps:
- script: |
    echo "##vso[task.setvariable variable=AZURE_ACCOUNT_KEY]$(AZURE-ACCOUNT-KEY)"
    echo "##vso[task.setvariable variable=AZURE_ACCOUNT_NAME]$(AZURE-ACCOUNT-NAME)"
    echo "##vso[task.setvariable variable=BLOB_NAME]$(BLOB-NAME)"
    echo "##vso[task.setvariable variable=BLOB_URL]$(BLOB-URL)"
    echo "##vso[task.setvariable variable=CONN_STRING_DB]$(CONN-STRING-DB)"
    echo "##vso[task.setvariable variable=CONTAINER_NAME]$(CONTAINER-NAME)"
    echo "##vso[task.setvariable variable=DB_HOST]$(DB-HOST)"
    echo "##vso[task.setvariable variable=DB_NAME]$(DB-NAME)"
    echo "##vso[task.setvariable variable=DB_PASSWORD]$(DB-PASSWORD)"
    echo "##vso[task.setvariable variable=DB_USER]$(DB-USER)"
    echo "##vso[task.setvariable variable=DIRETORIA]$(DIRETORIA)"
    echo "##vso[task.setvariable variable=EMAIL_HOST]$(EMAIL-HOST)"
    echo "##vso[task.setvariable variable=EMAIL_HOST_PASSWORD]$(EMAIL-HOST-PASSWORD)"
    echo "##vso[task.setvariable variable=EMAIL_HOST_USER]$(EMAIL-HOST-USER)"
    echo "##vso[task.setvariable variable=EMAIL_PORT]$(EMAIL-PORT)"
    echo "##vso[task.setvariable variable=GERENCIA]$(GERENCIA)"
    echo "##vso[task.setvariable variable=SECRET_KEY]$(SECRET-KEY)"
  displayName: 'Rename and Capitalize Variables'
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.12'
    architecture: 'x64'

- task: PythonScript@0
  displayName: 'Export project path'
  inputs:
    scriptSource: 'inline'
    script: |
      """Search all subdirectories for `manage.py`."""
      from glob import iglob
      from os import path
      manage_py = next(iglob(path.join('**', 'manage.py'), recursive=True), None)
      if not manage_py:
          raise SystemExit('Could not find a Django project')
      project_location = path.dirname(path.abspath(manage_py))
      print('Found Django project in', project_location)
      print('##vso[task.setvariable variable=projectRoot]{}'.format(project_location))

- script: |
    python -m pip install --upgrade pip setuptools wheel
    pip install -r requirements.txt
    pip install unittest-xml-reporting
  displayName: 'Install prerequisites'

- script: |
    pushd '$(projectRoot)'
    python manage.py test --testrunner xmlrunner.extra.djangotestrunner.XMLTestRunner --no-input
  displayName: 'Run tests'

- task: PublishTestResults@2
  inputs:
    testResultsFiles: "**/TEST-*.xml"
    testRunTitle: 'Python 3.12 Tests'
  condition: succeededOrFailed()

- task: AzureWebApp@1
  inputs:
    azureSubscription: 'Piemonte Data'
    appName: 'testespiemonte'
    appType: 'webAppLinux'
    runtimeStack: 'PYTHON|3.12'
    package: '$(Build.ArtifactStagingDirectory)'